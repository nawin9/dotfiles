[[plugins]]
repo = 'Shougo/dein.vim'

# [[plugins]]
# repo = 'laishulu/vim-macos-ime'
# build = './install'


# [[plugins]]
# repo = 'Shougo/defx.nvim'

[[plugins]]
repo = 'https://github.com/vim-scripts/renamer.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
" deoplete {{{

call deoplete#custom#option({
  \ 'auto_complete_delay': 0,
  \ 'ignore_case': v:true,
  \ 'refresh_always': v:false,
\ })

call deoplete#custom#source('_', 'converters', ['remove_overlap'])

call deoplete#enable()

"}}}
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add = '''
" memolist {{{

    let g:memolist_path = expand("$HOME/memo",1)
    let g:memolist_memo_suffix = "txt"
    let g:memolist_template_dir_path = g:memolist_path
    let g:memolist_ex_cmd = 'Files'

"}}}
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
build = './install --all'
hook_add = 'source ~/dotfiles/vim/plugins/fzf.rc.vim'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
" vim-easy-align {{{

    xmap ga <Plug>(EasyAlign)
    nmap ga <Plug>(EasyAlign)

"}}}
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
" vim-indent_guides_guide {{{

    map <Nop>(disable-IndentGuidesToggle) <Plug>IndentGuidesToggle
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size  = 1
    let g:indent_guides_auto_colors = 0

"}}}
'''

[[plugins]]
repo = 'romainl/Apprentice'

[[plugins]]
repo = 'thinca/vim-quickrun'
depends = 'Shougo/vimproc.vim'
hook_add = '''
" quickrun {{{

    let g:quickrun_no_default_key_mappings = 1
    let g:quickrun_config   = {}
    let g:quickrun_config._ = {
    \  'runner'                          : 'vimproc'
    \ ,'runner/vimproc/updatetime'       : 60
    \ ,'hook/time/enable'                : 1
    \ ,'hook/time/format'                : "\n*** time : %g s ***"
    \ ,'hook/time/dest'                  : ''
    \ ,"outputter/buffer/split"          : 'vertical'
    \ ,'outputter/buffer/close_on_empty' : 1
    \}

" }}}
'''

[[plugins]]
repo = 'thinca/vim-ref'
hook_add = '''
" vim-ref {{{

    " TODO:urlをよみこめない
    let g:ref_man_cmd            = 'man'
    let g:ref_pydoc_cmd          = 'python3 -m pydoc'
    let g:ref_source_webdict_cmd = 'w3m -dump %s'
    let g:ref_use_vimproc        = v:true

    "webdictサイトの設定
    let g:ref_source_webdict_sites = {
    \     'fsharp': { 'url'   : 'https://github.com/MicrosoftDocs/visualfsharpdocs/tree/live/docs/conceptual/%s'}
    \   , 'alk' : { 'url' : 'http://eow.alc.co.jp/%s/UTF-8/' }
    \ }

    " 出力に対するフィルタ
    function! g:ref_source_webdict_sites.fsharp.filter(output)
      let l:lst  = split(a:output, "\n")
      call filter(l:lst,{idx, val -> val =~ '.md'} )
      return join(l:lst,"\n")
    endfunction

"}}}
'''

[[plugins]]
repo = 'thinca/vim-partedit'
hook_add = '''
" vim-partedit {{{

    let g:partedit#opener   = 'vsplit'

"}}}
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
" tcomment_vim {{{

    if !exists('g:tcomment_types')
      let g:tcomment_types = {}
    endif

    let g:tcomment_types['']       = '// %s'
    let g:tcomment_types['fsharp'] = '// %s'
    let g:tcomment_types['mql4']   = '// %s'
    let g:tcomment_types['text']   = '// %s'
    let g:tcomment_types['memo']   = '// %s'
    let g:tcomment_types['osa']    = '// %s'

"}}}
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'callmekohei/vim-todoedit'
hook_add = '''
" todoedit {{{

  let g:doneTaskFile = expand('~/Dropbox/memo/done.txt')

" }}}
'''

[[plugins]]
repo = 'callmekohei/deoplete-todoedit'
on_ft = 'todoedit'
